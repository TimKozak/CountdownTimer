{"version":3,"sources":["components/Timer.js","components/Congrats.js","App.js","logic/getTime.js","index.js"],"names":["Timer","event_name","event_date","initialDays","initialHours","initialMinutes","initialSeconds","useState","days","setDays","hours","setHours","minutes","setMinutes","seconds","setSeconds","useEffect","myInterval","setInterval","clearInterval","class","Row","Col","Congrats","App","EVENT_NAME","eventDateArray","split","eventDay","parseInt","eventMonth","year","Date","getFullYear","today","endDate","Math","abs","getTime","document","body","style","backgroundColor","className","reduce","a","b","ReactDOM","render","StrictMode","getElementById"],"mappings":"8OAgEeA,EA7DD,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,WAAYC,EAAiB,EAAjBA,WAC3B,cACEA,EADF,GAAOC,EAAP,KAAoBC,EAApB,KAAkCC,EAAlC,KAAkDC,EAAlD,KAIA,EAAwBC,mBAASJ,GAAjC,mBAAOK,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAASH,GAAnC,mBAAOM,EAAP,KAAcC,EAAd,KACA,EAA8BJ,mBAASF,GAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KACA,EAA8BN,mBAASD,GAAvC,mBAAOQ,EAAP,KAAgBC,EAAhB,KA0BA,OAxBAC,qBAAU,WACR,IAAIC,EAAaC,aAAY,WACvBJ,EAAU,GACZC,EAAWD,EAAU,GAEP,IAAZA,IACFD,EAAWD,EAAU,GACrBG,EAAW,IACK,IAAZH,IACFD,EAASD,EAAQ,GACjBG,EAAW,IAEG,IAAVH,IACFD,EAAQD,EAAO,GACfG,EAAS,SAId,KACH,OAAO,WACLQ,cAAcF,OAKhB,gCACE,qBAAIG,MAAM,mBAAV,0BACgBnB,EADhB,IAC4B,mBAAGmB,MAAM,oBAErC,eAACC,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,WACE,oBAAIF,MAAM,cAAV,SAAyBZ,IACzB,oBAAIY,MAAM,cAAV,qBAEF,eAACE,EAAA,EAAD,WACE,oBAAIF,MAAM,cAAV,SAAyBV,IACzB,oBAAIU,MAAM,cAAV,sBAEF,eAACE,EAAA,EAAD,WACE,oBAAIF,MAAM,cAAV,SAAyBR,IACzB,oBAAIQ,MAAM,cAAV,wBAEF,eAACE,EAAA,EAAD,WACE,oBAAIF,MAAM,cAAV,SAAyBN,IACzB,oBAAIM,MAAM,cAAV,+BC/CKG,EARE,SAAC,GAAoB,IAAlBtB,EAAiB,EAAjBA,WAClB,OACE,8BACE,qBAAImB,MAAM,mBAAV,0BAA2CnB,EAA3C,sBC2BSuB,EA3BH,WAEV,IAAMC,EAAa,kBAMbC,ECbe,SAACxB,GACtB,IAAMwB,EAAiBxB,EAAWyB,MAAM,KAElCC,EAAWC,SAASH,EAAe,IACnCI,EAAaD,SAASH,EAAe,IAAM,EAC3CK,GAAO,IAAIC,MAAOC,cAElBC,EAAQ,IAAIF,KACdG,EAAU,IAAIH,KAAKD,EAAMD,EAAYF,GAEzC,GAAIO,EAAUD,EAAQ,EAAG,CACvB,KAAIC,EAAUD,IAAS,OAGrB,MAAO,CAAC,EAAG,EAAG,EAAG,GAFjBC,EAAU,IAAIH,KAAKD,EAAO,EAAGD,EAAYF,GAe7C,MAAO,CATMC,UAAUM,EAAUD,GAAX,OACRL,SAAUO,KAAKC,IAAIF,EAAUD,GAAnB,KAAgD,IACxDL,SACbO,KAAKC,IAAIF,EAAQG,UAAYJ,EAAMI,WAAnC,IAA+D,IAElDT,SACbO,KAAKC,IAAIF,EAAQG,UAAYJ,EAAMI,WAAa,IAAQ,KDXpCA,CAJJ,SAUnB,OAJAtB,qBAAU,WACRuB,SAASC,KAAKC,MAAMC,gBALR,YAMX,IAGD,qBAAKC,UAAU,MAAf,SACE,qBAAKA,UAAU,gBAAf,SACiD,IAA9CjB,EAAekB,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,GACtC,cAAC,EAAD,CAAU7C,WAAYwB,IAEtB,cAAC,EAAD,CAAOxB,WAAYwB,EAAYvB,WAAYwB,S,YEhBrDqB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFV,SAASW,eAAe,W","file":"static/js/main.7bcbada2.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\n\nconst Timer = ({ event_name, event_date }) => {\n  const [initialDays, initialHours, initialMinutes, initialSeconds] =\n    event_date;\n\n  // State values\n  const [days, setDays] = useState(initialDays);\n  const [hours, setHours] = useState(initialHours);\n  const [minutes, setMinutes] = useState(initialMinutes);\n  const [seconds, setSeconds] = useState(initialSeconds);\n\n  useEffect(() => {\n    let myInterval = setInterval(() => {\n      if (seconds > 0) {\n        setSeconds(seconds - 1);\n      }\n      if (seconds === 0) {\n        setMinutes(minutes - 1);\n        setSeconds(59);\n        if (minutes === 0) {\n          setHours(hours - 1);\n          setMinutes(59);\n\n          if (hours === 0) {\n            setDays(days - 1);\n            setHours(23);\n          }\n        }\n      }\n    }, 1000);\n    return () => {\n      clearInterval(myInterval);\n    };\n  });\n\n  return (\n    <div>\n      <h1 class=\"text-center pb-3\">\n        Countdown to {event_name} <i class=\"far fa-heart\"></i>\n      </h1>\n      <Row>\n        <Col>\n          <h2 class=\"text-center\">{days}</h2>\n          <h3 class=\"text-center\">Days</h3>\n        </Col>\n        <Col>\n          <h2 class=\"text-center\">{hours}</h2>\n          <h3 class=\"text-center\">Hours</h3>\n        </Col>\n        <Col>\n          <h2 class=\"text-center\">{minutes}</h2>\n          <h3 class=\"text-center\">Minutes</h3>\n        </Col>\n        <Col>\n          <h2 class=\"text-center\">{seconds}</h2>\n          <h3 class=\"text-center\">Seconds</h3>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default Timer;\n","import React from \"react\";\n\nconst Congrats = ({ event_name }) => {\n  return (\n    <div>\n      <h1 class=\"text-center pb-3\">Hooray! It's {event_name} ðŸŽ‰</h1>\n    </div>\n  );\n};\n\nexport default Congrats;\n","import { useEffect } from \"react\";\nimport Timer from \"./components/Timer\";\nimport Congrats from \"./components/Congrats\";\nimport { getTime } from \"./logic/getTime\";\n\nconst App = () => {\n  // Specify event name\n  const EVENT_NAME = \"Our Anniversary\";\n  // Specify event date (day.month)\n  const EVENT_DATE = \"19.11\";\n  // Specify background color\n  const COLOR = \"#B19CD9\";\n\n  const eventDateArray = getTime(EVENT_DATE);\n\n  useEffect(() => {\n    document.body.style.backgroundColor = COLOR;\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"center-screen\">\n        {eventDateArray.reduce((a, b) => a + b, 0) === 0 ? (\n          <Congrats event_name={EVENT_NAME} />\n        ) : (\n          <Timer event_name={EVENT_NAME} event_date={eventDateArray} />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","export const getTime = (event_date) => {\n  const eventDateArray = event_date.split(\".\");\n\n  const eventDay = parseInt(eventDateArray[0]);\n  const eventMonth = parseInt(eventDateArray[1]) - 1;\n  const year = new Date().getFullYear();\n\n  const today = new Date();\n  let endDate = new Date(year, eventMonth, eventDay);\n\n  if (endDate - today < 0) {\n    if (endDate - today <= -1000 * 60 * 60 * 24) {\n      endDate = new Date(year + 1, eventMonth, eventDay);\n    } else {\n      return [0, 0, 0, 0];\n    }\n  }\n\n  const days = parseInt((endDate - today) / (1000 * 60 * 60 * 24));\n  const hours = parseInt((Math.abs(endDate - today) / (1000 * 60 * 60)) % 24);\n  const minutes = parseInt(\n    (Math.abs(endDate.getTime() - today.getTime()) / (1000 * 60)) % 60\n  );\n  const seconds = parseInt(\n    (Math.abs(endDate.getTime() - today.getTime()) / 1000) % 60\n  );\n\n  return [days, hours, minutes, seconds];\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\n// Styles\nimport \"./bootstrap.min.css\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}